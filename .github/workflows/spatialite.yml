name: SpatiaLite Binaries

on:
  push:
    branches:
      - development
  workflow_dispatch:

jobs:
  collect-binaries:
    name: ${{ matrix.platform }}-${{ matrix.arch }}
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
            install_cmd: |
              sudo apt-get update
              sudo apt-get install -y libsqlite3-mod-spatialite
            binary_path: /usr/lib/x86_64-linux-gnu/mod_spatialite.so
            filename: mod_spatialite.so
          
          # macOS Intel
          - os: macos-13  # Intel runners
            platform: darwin
            arch: x86_64
            install_cmd: |
              brew install libspatialite
            binary_path: /usr/local/lib/mod_spatialite.dylib
            filename: mod_spatialite.dylib
          
          # macOS ARM64 (Apple Silicon)
          - os: macos-latest  # ARM64 runners
            platform: darwin
            arch: arm64
            install_cmd: |
              brew install libspatialite
            binary_path: /opt/homebrew/lib/mod_spatialite.dylib
            filename: mod_spatialite.dylib
          
          # Windows AMD64
          - os: windows-latest
            platform: win
            arch: amd64
            install_cmd: |
              curl -L -o spatialite.7z https://www.gaia-gis.it/gaia-sins/windows-bin-amd64/mod_spatialite-5.1.0-win-amd64.7z
              7z x spatialite.7z -o./spatialite-extract
            binary_path: ./spatialite-extract/mod_spatialite.dll
            filename: mod_spatialite.dll

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up environment
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y patchelf

    - name: Check if binary already exists
      id: check_binary
      shell: bash
      run: |
        BINARY_DIR="geoparser/db/spatialite/${{ matrix.platform }}-${{ matrix.arch }}"
        BINARY_FILE="$BINARY_DIR/${{ matrix.filename }}"
        
        if [ -f "$BINARY_FILE" ]; then
          echo "Binary already exists: $BINARY_FILE"
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "Binary missing: $BINARY_FILE"
          echo "exists=false" >> $GITHUB_OUTPUT
          mkdir -p "$BINARY_DIR"
        fi

    - name: Install SpatiaLite
      if: steps.check_binary.outputs.exists == 'false'
      shell: bash
      run: |
        ${{ matrix.install_cmd }}

    - name: Copy binary and dependencies to project directory
      if: steps.check_binary.outputs.exists == 'false'
      shell: bash
      run: |
        BINARY_DIR="geoparser/db/spatialite/${{ matrix.platform }}-${{ matrix.arch }}"
        
        # Windows: Copy all DLLs from the extracted folder
        if [ "${{ matrix.platform }}" = "win" ]; then
          cp ./spatialite-extract/mod_spatialite-5.1.0-win-amd64/*.dll "$BINARY_DIR/"
          echo "✓ Copied all DLLs to $BINARY_DIR"
        
        # macOS: Use otool to find and copy dependencies
        elif [ "${{ matrix.platform }}" = "darwin" ]; then
          BINARY_PATH="${{ matrix.binary_path }}"
          cp "$BINARY_PATH" "$BINARY_DIR/"
          
          # Get list of dependencies, filter for relevant ones
          otool -L "$BINARY_PATH" | grep -E 'libspatialite|libproj|libgeos|libfreexl|libsqlite3|libiconv|liblzma|libcharset' | awk '{print $1}' | while read dep; do
            if [ -f "$dep" ]; then
              cp "$dep" "$BINARY_DIR/"
              echo "✓ Copied dependency: $dep"
            else
              echo "✗ Dependency not found: $dep"
            fi
          done

        # Linux: Use ldd to find and copy dependencies
        elif [ "${{ matrix.platform }}" = "linux" ]; then
          BINARY_PATH="${{ matrix.binary_path }}"
          cp "$BINARY_PATH" "$BINARY_DIR/"
          
          ldd "$BINARY_PATH" | grep "=>" | awk '{print $3}' | while read dep; do
            if [ -f "$dep" ]; then
              cp "$dep" "$BINARY_DIR/"
              echo "✓ Copied dependency: $dep"
            fi
          done
          
          # Use patchelf to make all binaries relocatable
          for so_file in "$BINARY_DIR"/*.so*; do
            if [ -f "$so_file" ]; then
              echo "Patching $so_file"
              chmod +w "$so_file"
              patchelf --set-rpath '$ORIGIN' "$so_file"
            fi
          done
        fi

    - name: Verify binaries
      if: steps.check_binary.outputs.exists == 'false'
      shell: bash
      run: |
        BINARY_DIR="geoparser/db/spatialite/${{ matrix.platform }}-${{ matrix.arch }}"
        echo "Contents of $BINARY_DIR:"
        ls -la "$BINARY_DIR"
        
        # Verify the main binary exists
        if [ ! -f "$BINARY_DIR/${{ matrix.filename }}" ]; then
          echo "✗ Main binary missing!"
          exit 1
        fi
        echo "✓ Main binary is present."

    - name: Upload binaries as artifact
      if: steps.check_binary.outputs.exists == 'false'
      uses: actions/upload-artifact@v4
      with:
        name: spatialite-${{ matrix.platform }}-${{ matrix.arch }}
        path: geoparser/db/spatialite/${{ matrix.platform }}-${{ matrix.arch }}/

  commit-binaries:
    name: Commit all binaries
    needs: collect-binaries
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Copy binaries to correct locations
      run: |
        # Create directory structure
        mkdir -p geoparser/db/spatialite/{linux-x86_64,darwin-x86_64,darwin-arm64,win-amd64}
        
        # Copy binaries from artifacts
        if [ -d "artifacts/spatialite-linux-x86_64" ]; then
          cp artifacts/spatialite-linux-x86_64/* geoparser/db/spatialite/linux-x86_64/
        fi
        if [ -d "artifacts/spatialite-darwin-x86_64" ]; then
          cp artifacts/spatialite-darwin-x86_64/* geoparser/db/spatialite/darwin-x86_64/
        fi
        if [ -d "artifacts/spatialite-darwin-arm64" ]; then
          cp artifacts/spatialite-darwin-arm64/* geoparser/db/spatialite/darwin-arm64/
        fi
        if [ -d "artifacts/spatialite-win-amd64" ]; then
          cp artifacts/spatialite-win-amd64/* geoparser/db/spatialite/win-amd64/
        fi

    - name: Check what binaries were collected
      run: |
        echo "=== Binaries collected in this run ==="
        find geoparser/db/spatialite -type f | sort
        
        echo "=== File sizes ==="
        find geoparser/db/spatialite -type f -exec ls -lh {} \;

    - name: Commit and push binaries
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add all spatialite binaries
        git add geoparser/db/spatialite/
        
        if git diff --staged --quiet; then
          echo "No new binaries to commit"
        else
          git commit -m "Add/update SpatiaLite binaries and dependencies
          
          Collected binaries for multiple platforms:
          $(find geoparser/db/spatialite -type f | sort | sed 's/^/- /')"
          
          # Push changes
          git push origin ${{ github.ref_name }}
          echo "✓ Successfully pushed SpatiaLite binaries"
        fi

  summary:
    name: Binary Collection Summary
    needs: [collect-binaries, commit-binaries]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref_name }}
        fetch-depth: 0
        
    - name: Pull latest changes
      if: needs.commit-binaries.result == 'success'
      run: |
        git pull origin ${{ github.ref_name }}
        
    - name: Check all binaries
      run: |
        echo "=== SpatiaLite Binary Collection Summary ==="
        PLATFORMS=(
          "linux-x86_64:mod_spatialite.so"
          "darwin-x86_64:mod_spatialite.dylib"
          "darwin-arm64:mod_spatialite.dylib"
          "win-amd64:mod_spatialite.dll"
        )
        
        ALL_PRESENT=true
        for platform_file in "${PLATFORMS[@]}"; do
          IFS=':' read -r platform filename <<< "$platform_file"
          binary_path="geoparser/db/spatialite/$platform/$filename"
          
          echo "Checking for directory: geoparser/db/spatialite/$platform"
          if [ -d "geoparser/db/spatialite/$platform" ]; then
            echo "✓ Directory exists. Contents:"
            ls -la "geoparser/db/spatialite/$platform"
          else
            echo "✗ Directory missing: geoparser/db/spatialite/$platform"
            ALL_PRESENT=false
          fi
        done
        
        if [ "$ALL_PRESENT" = true ]; then
          echo "🎉 All SpatiaLite binary directories are available!"
          exit 0
        else
          echo "⚠️  Some binary directories are still missing."
          exit 1
        fi
